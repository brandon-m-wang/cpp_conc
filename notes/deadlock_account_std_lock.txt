The std::lock() function takes a variable number of lockable objects and attempts to lock them such that deadlock does not 
occur. In typical implementations, this is done by using a combination of lock(), try_lock(), and unlock() to attempt to lock 
the object and backing off if the lock is not acquired, which may have worse performance than a solution that locks in 
predefined order explicitly.

We use a lock_guard to still ensure that the mutexes are unlocked at the end of the block's scope. std::adopt_lock makes the
lock_guard assume that the executing thread already has ownership of the mutex.

As a recap:

Avoiding deadlock
    - Prefer locking single mutex
    - Avoid locking a mutex, then calling a user provided function
    - Use std::lock() to lock more than one mutex
        - However, this has more latency than a pre-defined ordering (as in manual ordering if possible)

Locking granularity
    - Fine-grained lock: protects small amount of data
        - If your locks are too fine-grained, then your program becomes tricky and more exposed to deadlocks
    - Coarse-grained lock: protects big amount of data
        - If your locks are too coarse-grained, your program becomes more sequential and lose out on parallel computing
