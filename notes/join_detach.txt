The simplest instance of joining and detaching threads. To join a thread is to have the main thread wait for its completion 
before proceeding. To detach a thread is to allow a thread become a daemon process (background process not directly in
control by its parent).

2 cases:

- t1 takes longer to finish executing than t2, therefore t2 can (usually) finish executing within the main thread's lifecycle
since the main thread waits for t1 to join with itself (current behavior) before finishing.
- t2 takes longer to finish executing than t1 and the main thread, therefore t2 never executes since the shared resource is 
gone (std::cout) which is owned by the main thread, and the main thread will complete upon t1's completion.

Without explicitly detaching the t2 thread as a daemon process (or joining it back with the main thread), there will be a 
segfault.

The "Short print." text can be printed anywhere in the execution of both threads concurrently. Behavior is non-deterministic.